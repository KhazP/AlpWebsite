GSAP 3 Cheat SheetMost code is linked to the appropriate page in the DocsLinks: Get started | Install | Forums | Tips | Learning | CodePen | ClubBasicsgsap.to() - Tween to new valuesAnimates properties of a target (selector text, Array, or object) to the specified values.gsap.to("selector", {
  // Properties (camelCase)
  x: 100,
  y: 50,
  rotation: 360,
  backgroundColor: "#ff0000",
  opacity: 0.5,

  // Special Properties
  duration: 1, // seconds
  delay: 0.5, // seconds before starting
  ease: "power2.inOut", // easing function
  stagger: 0.1, // stagger start times for multiple targets
  paused: false, // default is false
  overwrite: "auto", // default is false ('auto' or true/false)
  repeat: 2, // number of repeats (-1 for infinite)
  repeatDelay: 1, // seconds between repeats
  repeatRefresh: true, // invalidates on each repeat
  yoyo: true, // alternates back and forth
  yoyoEase: true, // or specify an ease for the yoyo
  immediateRender: false, // default depends on context

  // Callbacks
  onComplete: myFunc,
  onStart: myFunc,
  onUpdate: myFunc,
  onRepeat: myFunc,
  onReverseComplete: myFunc,
  // Each callback has a 'params' property as well (Array)
  onCompleteParams: ["param1", "param2"]
});
gsap.from() - Tween from provided valuesAnimates properties from the specified values to the element's current state.gsap.from("selector", {
  // fromVars (properties and special properties)
  opacity: 0,
  y: -100,
  duration: 1
});
gsap.fromTo() - Define both start and end valuesAnimates properties from a specified start state to a specified end state.gsap.fromTo("selector",
  { // fromVars
    opacity: 0,
    scale: 0.5
  },
  { // toVars (includes duration, ease, etc.)
    opacity: 1,
    scale: 1,
    duration: 1.5,
    ease: "elastic"
  }
);
gsap.set() - Set values immediatelySets properties immediately without animation. Equivalent to a zero-duration gsap.to().gsap.set("selector", {
  // toVars
  x: 100,
  opacity: 1
});
TimelinesCreate a sequence of animations.// Create a timeline instance
const tl = gsap.timeline({
  // Timeline options (similar to tween options)
  delay: 0.5,
  paused: false, // default is false
  repeat: 2, // number of repeats (-1 for infinite)
  repeatDelay: 1, // seconds between repeats
  repeatRefresh: true, // invalidates on each repeat
  yoyo: true, // alternates back and forth
  defaults: { // Children inherit these defaults
    duration: 1,
    ease: "none"
  },
  smoothChildTiming: true,
  autoRemoveChildren: true, // For memory management

  // Callbacks
  onComplete: myFunc,
  onStart: myFunc,
  onUpdate: myFunc,
  onRepeat: myFunc,
  onReverseComplete: myFunc,
  // Callbacks have 'params' property (Array)
});

// Sequence tweens
tl.to("#elem1", { x: 100, duration: 1 })
  .to("#elem2", { y: 50, autoAlpha: 0 }) // autoAlpha handles opacity and visibility
  .to("#elem3", { duration: 1, backgroundColor: "#00f" })
  .to(["#elem4", "#elem5"], { duration: 3, rotation: 180 });

// Position Parameter (controls placement in the timeline)
tl.to(target, { /* toVars */ }, positionParameter);

/* Position Parameter Examples:
 * "1"        // exactly 1 second from the start
 * "+=0.5"    // 0.5 seconds after the end of the previous animation
 * "-=0.7"    // overlap with previous animation by 0.7 seconds
 * "myLabel"  // insert at "myLabel" position
 * "myLabel+=2" // 2 seconds after "myLabel"
 * "<"        // at the start of the most recently added animation
 * "<0.5"     // 0.5 seconds after the start of the most recently added animation
 * ">"        // at the end of the most recently added animation
 * ">-0.5"    // overlap the end of the most recently added animation by 0.5 seconds
 * "random(1, 3)" // random time between 1 and 3 seconds
 * "50%"      // At 50% of the previous animation's duration
 */
Timeline Control Methodslet anim = gsap.to(...) // or gsap.timeline()

// Control methods (can be chained)
anim.play();       // Plays forward
anim.pause();      // Pauses
anim.resume();     // Resumes respecting direction
anim.reverse();    // Reverses direction
anim.restart();    // Restarts from the beginning
anim.seek(1.5);    // Jumps to a time (in seconds) or label
anim.timeScale(2); // Doubles speed (0.5 is half speed)
anim.progress(0.5); // Jumps to halfway (0 to 1)
anim.totalProgress(0.8); // Includes repeats

// Other useful methods (Tween or Timeline)
anim.kill();             // Immediately destroys the animation
anim.isActive();         // Returns true if currently animating
anim.then();             // Returns a Promise
anim.invalidate();       // Clears recorded start/end values
anim.eventCallback("onComplete", newFunc); // get/set event callback

// Timeline-specific methods
tl.add("myLabel", position); // Add a label
tl.add(tweenOrTimeline, position); // Add another animation
tl.call(func, params, position); // Add a function call
tl.getChildren();        // Get an array of the timeline's children
tl.clear();              // Empties the timeline
tl.tweenTo(timeOrLabel, { /* vars */ }); // Animate playhead to position
tl.tweenFromTo(fromTimeOrLabel, toTimeOrLabel, { /* vars */ }); // Animate playhead between positions
EasesSee GreenSock Ease VisualizerStandard Eases: power1, power2, power3, power4, circ, expo, sine (each with .in, .out, .inOut)Complex Eases: back, elastic, bounce, rough, slow, steps, linear (none)Expressive Core Eases: elastic, back, bounceEasePack Plugin (Club GreenSock): Extra expressive eases.Members-only Expressive Plugins: CustomEase, CustomWiggle, CustomBounceInstallationES Modules (Recommended)import gsap from "gsap";
import { DrawSVGPlugin } from "gsap/DrawSVGPlugin"; // Example plugin

gsap.registerPlugin(DrawSVGPlugin); // Register plugins once
UMD / CommonJSimport { gsap } from "gsap/dist/gsap";
import { DrawSVGPlugin } from "gsap/dist/DrawSVGPlugin";

gsap.registerPlugin(DrawSVGPlugin);
MiscellaneousGet Property Valuegsap.getProperty("selector", "x"); // Get current 'x' value
gsap.getProperty("selector", "x", "px"); // Get value in pixels
Global Defaultsgsap.defaults({ ease: "none", duration: 2 });
Configurationgsap.config({
  autoSleep: 60,
  force3D: "auto", // false, true, or 'auto'
  nullTargetWarn: true,
  trialWarn: true,
  units: { left: "%", top: "%", rotation: "rad" } // Default units
});
Register Effect for Reusegsap.registerEffect({
  name: "fade",
  effect: (targets, config) => {
    return gsap.to(targets, {
      duration: config.duration,
      opacity: 0
    });
  },
  defaults: { duration: 2 },
  extendTimeline: true // Allows tl.fade(...)
});

// Use the effect
gsap.effects.fade(".box");
// Or on timelines (if extendTimeline: true)
tl.fade(".box", { duration: 3 });
Quick SetterFaster way to repeatedly set a property than gsap.set().const setX = gsap.quickSetter(".box", "x", "px"); // Target, property, units
const setY = gsap.quickSetter(".box", "y", "px");

document.addEventListener("pointermove", e => {
  setX(e.clientX);
  setY(e.clientY);
});
ScrollTriggerLinks animations to scroll position. Requires registration: gsap.registerPlugin(ScrollTrigger);gsap.to(".element", {
  scrollTrigger: {
    trigger: ".triggerElement", // Selector or element
    start: "top center", // [trigger] [scroller] positions (e.g., "top 80%", "bottom bottom")
    end: "+=500", // Relative end, or absolute like "bottom 20%"
    scrub: true, // Or a number (seconds) to smooth scrubbing
    pin: true, // Or selector/element to pin
    markers: true, // Development only! Shows start/end markers
    toggleActions: "play pause resume reset", // onEnter onLeave onEnterBack onLeaveBack
    // Other actions: complete, reverse, none
    toggleClass: "active", // Add class to trigger element
    fastScrollEnd: true, // Uses velocity to predict end
    containerAnimation: myTimeline, // Link scrubbing to another animation's progress
    anticipatePin: 1, // Helps prevent jitter when pinning
    snap: { // Snap to progress values
      snapTo: "labels", // or 1/10, or [0, 0.2, 0.5, 1], or function
      duration: 0.3, // Snap animation duration
      delay: 0.1,
      ease: "power1.inOut"
    },
    pinSpacing: false, // "padding", "margin", true/false
    pinType: "transform", // or "fixed"
    pinnedContainer: selector, // Pin within this container
    preventOverlaps: true, // Or arbitrary string ID for grouping
    once: true, // Only trigger once
    endTrigger: selectorOrElement, // Different element for end trigger
    horizontal: false, // Switches to horizontal scroll mode
    invalidateOnRefresh: true, // Clears start/end values on refresh
    refreshPriority: 0, // Influences refresh order (-1, 0, 1, etc.)

    // Callbacks
    onEnter: callback,
    onLeave: callback,
    onEnterBack: callback,
    onLeaveBack: callback,
    onUpdate: callback,
    onToggle: callback,
    onRefresh: callback,
    onRefreshInit: callback,
    onScrubComplete: callback,
  },
  // Animation properties
  x: 500,
  rotation: 360
});
Utility MethodsAccess via gsap.utils.methodName()checkPrefix(): Get relevant browser prefix for a property.clamp(min, max, value): Clamp value to a range.distribute(config): Distribute values among an array/targets.getUnit(string): Get the unit from a string (e.g., "px").interpolate(start, end, progress): Interpolate between values.mapRange(inMin, inMax, outMin, outMax, value): Map value from one range to another.normalize(min, max, value): Normalize value within a range (0 to 1).pipe(...functions): Sequence function calls.random(min, max, increment, snap): Get a random value.selector(scope): Get a scoped selector function (like jQuery $).shuffle(array): Shuffle an array in place.snap(incrementOrArray, value): Snap value to the nearest increment or array value.splitColor(colorString): Split color into RGB/HSL array.toArray(value): Convert array-like things to a true array.unitize(function, unit): Add a specified unit to a function's result.wrap(minOrArray, value): Wrap value within a range or array.wrapYoyo(minOrArray, value): Wrap value, yoyoing at the edges.Other PluginsRegister plugins once before using them: gsap.registerPlugin(Draggable, TextPlugin);Available Plugins (some require Club GreenSock membership):Draggable, DrawSVGPlugin, EaselPlugin, Flip, GSDevTools, InertiaPlugin, MorphSVGPlugin, MotionPathPlugin, MotionPathHelper, Physics2DPlugin, PhysicsPropsPlugin, PixiPlugin, ScrambleTextPlugin, ScrollToPlugin, ScrollTrigger, SplitText, TextPluginSee greensock.com/club for membership details.Nesting Timelinesfunction scene1() {
  let tl = gsap.timeline();
  tl.to(...)
    .to(...);
  return tl;
}

function scene2() {
  let tl = gsap.timeline();
  tl.to(...)
    .to(...);
  return tl;
}

// Create a master timeline
let master = gsap.timeline()
  .add(scene1()) // Add the first scene timeline
  .add(scene2(), "-=0.5"); // Add the second scene, overlapping the end of the first
Ticker (Request Animation Frame)Add a function to be called on every animation frame.gsap.ticker.add(myFunction);

function myFunction(time, deltaTime, frame) {
  // Executes on every tick after the core engine updates
  // time: total elapsed time (seconds)
  // deltaTime: time since last tick (seconds)
  // frame: frame number
  console.log("Tick!", time);
}

// To remove the listener later:
gsap.ticker.remove(myFunction);
For an all-access pass to premium content - JOIN CLUB GREENSOCK